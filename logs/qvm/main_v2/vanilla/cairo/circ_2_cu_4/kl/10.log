============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /root/projects/qvm
plugins: anyio-3.6.2
collected 55 items / 54 deselected / 1 selected

tst/qvm/integration/bench_test.py 
------------------- Testing --------------

F

=================================== FAILURES ===================================
_ TestBenchDiffBackendQvmFrpV2.test_bench_diff_methods_diff_metric[/root/projects/QASMBench/small//hhl_n7/hhl_n7.qasm,/root/projects/QASMBench/small//qpe_n9/qpe_n9.qasm-FakeCairo-4-vanilla-kl] _

self = <bench_test.TestBenchDiffBackendQvmFrpV2 object at 0x7f95cff775b0>
qasm = '/root/projects/QASMBench/small//hhl_n7/hhl_n7.qasm,/root/projects/QASMBench/small//qpe_n9/qpe_n9.qasm'
backend = 'FakeCairo', cu_size = 4, qvm_version = 'vanilla', metric = 'kl'

    def test_bench_diff_methods_diff_metric(
        self, qasm, backend, cu_size, qvm_version, metric
    ):
        """Given a list of qasm benchmarks, run on QvmFrpBackendManagerV2
        and QvmProcessManagerV2.
    
        Support setting qvm versions or baseline
        - vanilla: randomly select exe
        - random: sort exes, greedily select without sorting processes
        - small_first: sort exes, sort processes (small circ first) and greedily select
        - large_first: sort exes, sort processes (large circ first) and greedily select
        - brute_force: sort exes, sort processes, and find optimal solution minimizing sum of idxes
        - baseline: online compilation
    
        Support different metric:
        - kl: KL divergence
        - pst: Percentage of successful trials
        """
        print("\n------------------- Testing --------------\n")
    
        self.prepare_for_test(backend, cu_size, vs=qvm_version)
        if qvm_version != "vanilla":
            self.init_proc_cache(qasm, backend, cu_size)
    
        if metric == "pst":
            self.fid_calculator = PstCalculator()
    
        # Prepare circuits
        shots = QVM_SHOTS
        qasms = qasm.split(",")
        circ_list = [self.get_qiskit_circ("qasm", qasm_path=q) for q in qasms]
    
        # Execution
        if qvm_version in V2M:
            res = self.run_qvm(
                circ_list, independent=True, method=V2M[qvm_version], shots=self.shots
            )
        elif qvm_version == "baseline":
            res = self.run_frp(circ_list, independent=True, shots=self.shots)
        else:
            raise ValueError(
                "Unsupported version, should be in one of "
                "[vanilla, random, small_first, large_first, brute_force, baseline]"
            )
    
>       fid = self.fid_calculator.calc_fidelity(circ_list, res, shots=self.shots)

tst/qvm/integration/bench_test.py:629: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <qvm.util.circuit.KlReliabilityCalculator object at 0x7f9648444130>
circ = [<qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x7f95cfada140>, <qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x7f95cf7ac730>]
counts = ResourceConflictError('`naive` method cannot select executables from all processes, sort=False, reverse=False')
kwargs = {'shots': 1048576}

    def calc_fidelity(
        self,
        circ: QuantumCircuit | List[QuantumCircuit],
        counts: Counts | List[Counts],
        **kwargs,
    ):
        """Calculate fidelity using KL-divergence between two prob distributions"""
        if isinstance(counts, Counts) and isinstance(circ, QuantumCircuit):
            return self._calc_single_fidelity(circ, counts, **kwargs)
        if isinstance(counts, Counts) and isinstance(circ, list):
            # In this case, counts is from a merged exe but
            # the input circ is a list, so we merge the circ list
            merged_circ = merge_circuits_v2(circ)
            return self._calc_single_fidelity(merged_circ, counts, **kwargs)
    
>       assert len(circ) == len(counts)
E       TypeError: object of type 'ResourceConflictError' has no len()

../qvm/util/circuit.py:305: TypeError
------------------------------ Captured log call -------------------------------
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 9, current visited status: {2, 3, 5, 8, 9, 11, 14, 16, 19}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 9'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 20, current visited status: {2, 3, 5, 8, 9, 11, 14, 16, 18, 19, 20, 21, 23, 24}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 20'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 17, current visited status: {2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 17'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 6, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 6'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 22, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 22'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 25, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 25'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 26, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 26'
WARNING  root:backend_manager.py:432 cannot compile on compute unit <qvm.model.compute_unit.ComputeUnit object at 0x7f95c429ef80>, error: 'Number of qubits (7) in circuit-88 is greater than maximum (4) in the coupling_map'
WARNING  root:backend_manager.py:432 cannot compile on compute unit <qvm.model.compute_unit.ComputeUnit object at 0x7f95776dbf40>, error: 'Number of qubits (9) in circuit-90 is greater than maximum (8) in the coupling_map'
=========================== short test summary info ============================
FAILED tst/qvm/integration/bench_test.py::TestBenchDiffBackendQvmFrpV2::test_bench_diff_methods_diff_metric[/root/projects/QASMBench/small/hhl_n7/hhl_n7.qasm,/root/projects/QASMBench/small/qpe_n9/qpe_n9.qasm-FakeCairo-4-vanilla-kl]
======================= 1 failed, 54 deselected in 6.30s =======================
