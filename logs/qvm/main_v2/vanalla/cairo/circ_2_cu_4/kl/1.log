============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /root/projects/qvm
plugins: anyio-3.6.2
collected 55 items / 54 deselected / 1 selected

tst/qvm/integration/bench_test.py 
------------------- Testing --------------

F

=================================== FAILURES ===================================
_ TestBenchDiffBackendQvmFrpV2.test_bench_diff_methods_diff_metric[/root/projects/QASMBench/small//shor_n5/shor_n5.qasm,/root/projects/QASMBench/small//teleportation_n3/teleportation_n3.qasm-FakeCairo-4-vanalla-kl] _

self = <bench_test.TestBenchDiffBackendQvmFrpV2 object at 0x7fe275917790>
qasm = '/root/projects/QASMBench/small//shor_n5/shor_n5.qasm,/root/projects/QASMBench/small//teleportation_n3/teleportation_n3.qasm'
backend = 'FakeCairo', cu_size = 4, qvm_version = 'vanalla', metric = 'kl'

    def test_bench_diff_methods_diff_metric(
        self, qasm, backend, cu_size, qvm_version, metric
    ):
        """Given a list of qasm benchmarks, run on QvmFrpBackendManagerV2
        and QvmProcessManagerV2.
    
        Support setting qvm versions or baseline
        - vanilla: randomly select exe
        - random: sort exes, greedily select without sorting processes
        - small_first: sort exes, sort processes (small circ first) and greedily select
        - large_first: sort exes, sort processes (large circ first) and greedily select
        - brute_force: sort exes, sort processes, and find optimal solution minimizing sum of idxes
        - baseline: online compilation
    
        Support different metric:
        - kl: KL divergence
        - pst: Percentage of successful trials
        """
        print("\n------------------- Testing --------------\n")
    
        self.prepare_for_test(backend, cu_size, vs=qvm_version)
        self.init_proc_cache(qasm, backend, cu_size)
    
        if metric == "pst":
            self.fid_calculator = PstCalculator()
    
        # Prepare circuits
        shots = QVM_SHOTS
        qasms = qasm.split(",")
        circ_list = [self.get_qiskit_circ("qasm", qasm_path=q) for q in qasms]
    
        # Execution
        if qvm_version in V2M:
            res = self.run_qvm(
                circ_list, independent=True, method=V2M[qvm_version], shots=self.shots
            )
        elif qvm_version == "baseline":
            res = self.run_frp(circ_list, independent=True, shots=self.shots)
        else:
>           raise ValueError(
                "Unsupported version, should be in one of "
                "[vanilla, random, small_first, large_first, brute_force, baseline]"
            )
E           ValueError: Unsupported version, should be in one of [vanilla, random, small_first, large_first, brute_force, baseline]

tst/qvm/integration/bench_test.py:623: ValueError
------------------------------ Captured log call -------------------------------
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 9, current visited status: {2, 3, 5, 8, 9, 11, 14, 16, 19}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 9'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 20, current visited status: {2, 3, 5, 8, 9, 11, 14, 16, 18, 19, 20, 21, 23, 24}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 20'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 17, current visited status: {2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 17'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 6, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 6'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 22, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 22'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 25, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 25'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 26, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 26'
=========================== short test summary info ============================
FAILED tst/qvm/integration/bench_test.py::TestBenchDiffBackendQvmFrpV2::test_bench_diff_methods_diff_metric[/root/projects/QASMBench/small/shor_n5/shor_n5.qasm,/root/projects/QASMBench/small/teleportation_n3/teleportation_n3.qasm-FakeCairo-4-vanalla-kl]
======================= 1 failed, 54 deselected in 2.06s =======================
