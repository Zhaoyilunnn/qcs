============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /root/projects/qvm
plugins: anyio-3.6.2
collected 55 items / 54 deselected / 1 selected

tst/qvm/integration/bench_test.py 
------------------- Testing --------------

system_name     qubits         status    
ScQ-P10        10             Online    
ScQ-P18        18             Online    
ScQ-P136       136            Online    
F

=================================== FAILURES ===================================
_ TestQuafuBackendRealMachineQvmFrpV2.test_bench_diff_methods_diff_metric[/root/projects/QASMBench/small//error_correctiond3_n5/error_correctiond3_n5.qasm,/root/projects/QASMBench/small//qrng_n4/qrng_n4.qasm-ScQ-P18-4-baseline-kl] _

self = <bench_test.TestQuafuBackendRealMachineQvmFrpV2 object at 0x7f632d8a2620>
qasm = '/root/projects/QASMBench/small//error_correctiond3_n5/error_correctiond3_n5.qasm,/root/projects/QASMBench/small//qrng_n4/qrng_n4.qasm'
backend = 'ScQ-P18', cu_size = 4, qvm_version = 'baseline', metric = 'kl'

    def test_bench_diff_methods_diff_metric(
        self, qasm, backend, cu_size, qvm_version, metric
    ):
        """Given a list of qasm benchmarks, run on QvmFrpBackendManagerV2
        and QvmProcessManagerV2.
    
        Support setting qvm versions or baseline
        - vanilla: randomly select exe
        - random: sort exes, greedily select without sorting processes
        - small_first: sort exes, sort processes (small circ first) and greedily select
        - large_first: sort exes, sort processes (large circ first) and greedily select
        - brute_force: sort exes, sort processes, and find optimal solution minimizing sum of idxes
        - baseline: online compilation
    
        Support different metric:
        - kl: KL divergence
        - pst: Percentage of successful trials
        """
        print("\n------------------- Testing --------------\n")
    
        self.prepare_for_test(backend, cu_size, vs=qvm_version)
    
        if metric == "pst":
            self.fid_calculator = PstCalculator()
    
        # Prepare circuits
        shots = QVM_SHOTS
        qasms = qasm.split(",")
        circ_list = [self.get_qiskit_circ("qasm", qasm_path=q) for q in qasms]
    
        # Execution
        if qvm_version in V2M:
            res = self.run_qvm(
                circ_list, independent=True, method=V2M[qvm_version], shots=self.shots
            )
        elif qvm_version == "baseline":
>           res = self.run_frp(circ_list, independent=True, shots=self.shots)

tst/qvm/integration/bench_test.py:588: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tst/qvm/integration/bench_test.py:398: in run_frp
    trans_list = [
tst/qvm/integration/bench_test.py:399: in <listcomp>
    transpile(circ_list[i], cu_list[i].backend) for i in range(len(circ_list))
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:382: in transpile
    _serial_transpile_circuit(
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:475: in _serial_transpile_circuit
    result = pass_manager.run(circuit, callback=callback, output_name=output_name)
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/passmanager.py:528: in run
    return super().run(circuits, output_name, callback)
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/passmanager.py:228: in run
    return self._run_single_circuit(circuits, output_name, callback)
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/passmanager.py:283: in _run_single_circuit
    result = running_passmanager.run(circuit, output_name=output_name, callback=callback)
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/runningpassmanager.py:125: in run
    dag = self._do_pass(pass_, dag, passset.options)
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/runningpassmanager.py:172: in _do_pass
    dag = self._run_this_pass(pass_, dag)
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/runningpassmanager.py:201: in _run_this_pass
    new_dag = pass_.run(dag)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <qiskit.transpiler.passes.basis.unroll_custom_definitions.UnrollCustomDefinitions object at 0x7f632beee080>
dag = <qiskit.dagcircuit.dagcircuit.DAGCircuit object at 0x7f632a1cb250>

    def run(self, dag):
        """Run the UnrollCustomDefinitions pass on `dag`.
    
        Args:
            dag (DAGCircuit): input dag
    
        Raises:
            QiskitError: if unable to unroll given the basis due to undefined
            decomposition rules (such as a bad basis) or excessive recursion.
    
        Returns:
            DAGCircuit: output unrolled dag
        """
    
        if self._basis_gates is None:
            return dag
    
        basic_insts = {"measure", "reset", "barrier", "snapshot", "delay"}
        device_insts = basic_insts | set(self._basis_gates)
    
        for node in dag.op_nodes():
            if isinstance(node.op, ControlFlowOp):
                node.op = control_flow.map_blocks(self.run, node.op)
                continue
    
            if getattr(node.op, "_directive", False):
                continue
    
            if dag.has_calibration_for(node):
                continue
    
            if node.name in device_insts or self._equiv_lib.has_entry(node.op):
                if isinstance(node.op, ControlledGate) and node.op._open_ctrl:
                    pass
                else:
                    continue
    
            try:
                rule = node.op.definition.data
            except TypeError as err:
                raise QiskitError(f"Error decomposing node {node.name}: {err}") from err
            except AttributeError:
                # definition is None
                rule = None
    
            if not rule:
                if rule == []:
                    dag.remove_op_node(node)
                    continue
    
                # opaque node
>               raise QiskitError(
                    "Cannot unroll the circuit to the given basis, %s. "
                    "Instruction %s not found in equivalence library "
                    "and no rule found to expand." % (str(self._basis_gates), node.op.name)
                )
E               qiskit.exceptions.QiskitError: "Cannot unroll the circuit to the given basis, ['cz', 'rx', 'ry', 'rz', 'h']. Instruction id not found in equivalence library and no rule found to expand."

/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/transpiler/passes/basis/unroll_custom_definitions.py:90: QiskitError
------------------------------ Captured log call -------------------------------
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 9, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 9'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 8, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 8'
=========================== short test summary info ============================
FAILED tst/qvm/integration/bench_test.py::TestQuafuBackendRealMachineQvmFrpV2::test_bench_diff_methods_diff_metric[/root/projects/QASMBench/small/error_correctiond3_n5/error_correctiond3_n5.qasm,/root/projects/QASMBench/small/qrng_n4/qrng_n4.qasm-ScQ-P18-4-baseline-kl]
======================= 1 failed, 54 deselected in 3.90s =======================
