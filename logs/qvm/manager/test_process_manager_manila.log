============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /root/projects/qcs
collected 3 items

qvm/qvm_test.py .[CircuitInstruction(operation=Instruction(name='rz', num_qubits=1, num_clbits=0, params=[ParameterExpression(1.5707963267949)]), qubits=(Qubit(QuantumRegister(3, 'q'), 0),), clbits=()), CircuitInstruction(operation=Instruction(name='sx', num_qubits=1, num_clbits=0, params=[]), qubits=(Qubit(QuantumRegister(3, 'q'), 0),), clbits=()), CircuitInstruction(operation=Instruction(name='rz', num_qubits=1, num_clbits=0, params=[ParameterExpression(1.5707963267949)]), qubits=(Qubit(QuantumRegister(3, 'q'), 0),), clbits=()), CircuitInstruction(operation=Instruction(name='cx', num_qubits=2, num_clbits=0, params=[]), qubits=(Qubit(QuantumRegister(3, 'q'), 0), Qubit(QuantumRegister(3, 'q'), 1)), clbits=()), CircuitInstruction(operation=Instruction(name='measure', num_qubits=1, num_clbits=1, params=[]), qubits=(Qubit(QuantumRegister(3, 'q'), 0),), clbits=(Clbit(ClassicalRegister(2, 'c'), 0),)), CircuitInstruction(operation=Instruction(name='measure', num_qubits=1, num_clbits=1, params=[]), qubits=(Qubit(QuantumRegister(3, 'q'), 1),), clbits=(Clbit(ClassicalRegister(2, 'c'), 1),))]
[CircuitInstruction(operation=Instruction(name='rz', num_qubits=1, num_clbits=0, params=[ParameterExpression(1.5707963267949)]), qubits=(Qubit(QuantumRegister(5, 'q'), 1),), clbits=()), CircuitInstruction(operation=Instruction(name='sx', num_qubits=1, num_clbits=0, params=[]), qubits=(Qubit(QuantumRegister(5, 'q'), 1),), clbits=()), CircuitInstruction(operation=Instruction(name='rz', num_qubits=1, num_clbits=0, params=[ParameterExpression(1.5707963267949)]), qubits=(Qubit(QuantumRegister(5, 'q'), 1),), clbits=()), CircuitInstruction(operation=Instruction(name='cx', num_qubits=2, num_clbits=0, params=[]), qubits=(Qubit(QuantumRegister(5, 'q'), 1), Qubit(QuantumRegister(5, 'q'), 2)), clbits=()), CircuitInstruction(operation=Instruction(name='measure', num_qubits=1, num_clbits=1, params=[]), qubits=(Qubit(QuantumRegister(5, 'q'), 1),), clbits=(Clbit(ClassicalRegister(5, 'c'), 1),)), CircuitInstruction(operation=Instruction(name='measure', num_qubits=1, num_clbits=1, params=[]), qubits=(Qubit(QuantumRegister(5, 'q'), 2),), clbits=(Clbit(ClassicalRegister(5, 'c'), 2),))]
(0, ShiftPhase(-1.5707963268, DriveChannel(1)))
(0, ShiftPhase(-1.5707963268, ControlChannel(0)))
(0, ShiftPhase(-1.5707963268, ControlChannel(3)))
(0, Play(Drag(duration=160, amp=(0.09631609052632353+0.0019312172308281552j), sigma=40, beta=-0.6480781322121083, name='X90p_d1'), DriveChannel(1), name='X90p_d1'))
(160, ShiftPhase(-1.5707963268, DriveChannel(1)))
(160, ShiftPhase(1.5707963267948966, DriveChannel(1)))
(160, ShiftPhase(-1.5707963268, ControlChannel(0)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(0)))
(160, ShiftPhase(-1.5707963268, ControlChannel(3)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(3)))
(160, Play(Drag(duration=160, amp=(-3.54434123743214e-17-0.1929449503263498j), sigma=40, beta=-0.6697656325620573, name='Ym_d1'), DriveChannel(1), name='Ym_d1'))
(160, Play(Drag(duration=160, amp=(0.09980067544200748+0.0006966624748418894j), sigma=40, beta=-1.7125497287568607, name='X90p_d2'), DriveChannel(2), name='X90p_d2'))
(320, Play(GaussianSquare(duration=896, amp=(0.03396202606916554+0.0011416493946286668j), sigma=64, width=640, name='CR90p_d2_u2'), DriveChannel(2), name='CR90p_d2_u2'))
(320, Play(GaussianSquare(duration=896, amp=(-0.6187496878401509+0.5050008062061525j), sigma=64, width=640, name='CR90p_u2'), ControlChannel(2), name='CR90p_u2'))
(1216, Play(Drag(duration=160, amp=(0.1929449503263498+0j), sigma=40, beta=-0.6697656325620573, name='Xp_d1'), DriveChannel(1), name='Xp_d1'))
(1376, Play(GaussianSquare(duration=896, amp=(-0.03396202606916554-0.0011416493946286627j), sigma=64, width=640, name='CR90m_d2_u2'), DriveChannel(2), name='CR90m_d2_u2'))
(1376, Play(GaussianSquare(duration=896, amp=(0.6187496878401508-0.5050008062061526j), sigma=64, width=640, name='CR90m_u2'), ControlChannel(2), name='CR90m_u2'))
(2272, Acquire(22400, AcquireChannel(1), MemorySlot(1)))
(2272, Acquire(22400, AcquireChannel(2), MemorySlot(2)))
(2272, Play(GaussianSquare(duration=22400, amp=(-0.238399447998461+0.12675055500481686j), sigma=64, width=22144, name='M_m1'), MeasureChannel(1), name='M_m1'))
(2272, Play(GaussianSquare(duration=22400, amp=(0.17297471856935154+0.24511170256814263j), sigma=64, width=22144, name='M_m2'), MeasureChannel(2), name='M_m2'))
(24672, Delay(1680, MeasureChannel(1)))
(24672, Delay(1680, MeasureChannel(2)))
{'10': 123, '00': 489, '01': 50, '11': 362}
================== Original ========================
{'100': 30, '110': 442, '010': 35, '000': 517}
.===================== Schedule 0 ===========================
(0, ShiftPhase(-1.5707963268, DriveChannel(0)))
(0, ShiftPhase(-1.5707963268, ControlChannel(1)))
(0, Play(Drag(duration=160, amp=(0.09951327785271548+0.0006933284415864516j), sigma=40, beta=-0.803458359149747, name='X90p_d0'), DriveChannel(0), name='X90p_d0'))
(160, ShiftPhase(-1.5707963268, DriveChannel(0)))
(160, ShiftPhase(1.5707963267948966, DriveChannel(0)))
(160, ShiftPhase(-1.5707963268, ControlChannel(1)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(1)))
(160, Play(Drag(duration=160, amp=(-3.6468764295786235e-17-0.1985267062099168j), sigma=40, beta=-0.589247519648376, name='Ym_d0'), DriveChannel(0), name='Ym_d0'))
(160, Play(Drag(duration=160, amp=(0.09631609052632353+0.0019312172308281552j), sigma=40, beta=-0.6480781322121083, name='X90p_d1'), DriveChannel(1), name='X90p_d1'))
(320, Play(GaussianSquare(duration=464, amp=(0.07842142904203984+0.002474560573637188j), sigma=64, width=208, name='CR90p_d1_u0'), DriveChannel(1), name='CR90p_d1_u0'))
(320, Play(GaussianSquare(duration=464, amp=(-0.16890323703241206+0.7767271957330741j), sigma=64, width=208, name='CR90p_u0'), ControlChannel(0), name='CR90p_u0'))
(784, Play(Drag(duration=160, amp=(0.1985267062099168+0j), sigma=40, beta=-0.589247519648376, name='Xp_d0'), DriveChannel(0), name='Xp_d0'))
(944, Play(GaussianSquare(duration=464, amp=(-0.07842142904203984-0.0024745605736371783j), sigma=64, width=208, name='CR90m_d1_u0'), DriveChannel(1), name='CR90m_d1_u0'))
(944, Play(GaussianSquare(duration=464, amp=(0.16890323703241197-0.7767271957330741j), sigma=64, width=208, name='CR90m_u0'), ControlChannel(0), name='CR90m_u0'))
(1408, Acquire(22400, AcquireChannel(0), MemorySlot(0)))
(1408, Acquire(22400, AcquireChannel(1), MemorySlot(1)))
(1408, Play(GaussianSquare(duration=22400, amp=(-0.23877102316798726-0.14624772988088564j), sigma=64, width=22144, name='M_m0'), MeasureChannel(0), name='M_m0'))
(1408, Play(GaussianSquare(duration=22400, amp=(-0.238399447998461+0.12675055500481686j), sigma=64, width=22144, name='M_m1'), MeasureChannel(1), name='M_m1'))
(23808, Delay(1680, MeasureChannel(0)))
(23808, Delay(1680, MeasureChannel(1)))
{'00': 133, '01': 891}
===================== Schedule 1 ===========================
(0, ShiftPhase(-1.5707963268, DriveChannel(2)))
(0, ShiftPhase(-1.5707963268, ControlChannel(2)))
(0, ShiftPhase(-1.5707963268, ControlChannel(5)))
(0, Play(Drag(duration=160, amp=(0.09980067544200748+0.0006966624748418894j), sigma=40, beta=-1.7125497287568607, name='X90p_d2'), DriveChannel(2), name='X90p_d2'))
(160, ShiftPhase(-1.5707963268, DriveChannel(2)))
(160, ShiftPhase(1.5707963267948966, DriveChannel(2)))
(160, ShiftPhase(-1.5707963268, ControlChannel(2)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(2)))
(160, ShiftPhase(-1.5707963268, ControlChannel(5)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(5)))
(160, Play(Drag(duration=160, amp=(-3.6695864439047256e-17-0.19976298180883037j), sigma=40, beta=-1.7735007652695884, name='Ym_d2'), DriveChannel(2), name='Ym_d2'))
(160, Play(Drag(duration=160, amp=(0.0979869484685853+0.00041116945711415666j), sigma=40, beta=-0.04121117942326032, name='X90p_d3'), DriveChannel(3), name='X90p_d3'))
(320, Play(GaussianSquare(duration=640, amp=(0.05128749017413243+0.0009360256849046683j), sigma=64, width=384, name='CR90p_d3_u4'), DriveChannel(3), name='CR90p_d3_u4'))
(320, Play(GaussianSquare(duration=640, amp=(0.19914549342232601+0.17332545183840145j), sigma=64, width=384, name='CR90p_u4'), ControlChannel(4), name='CR90p_u4'))
(960, Play(Drag(duration=160, amp=(0.19976298180883037+0j), sigma=40, beta=-1.7735007652695884, name='Xp_d2'), DriveChannel(2), name='Xp_d2'))
(1120, Play(GaussianSquare(duration=640, amp=(-0.05128749017413243-0.000936025684904662j), sigma=64, width=384, name='CR90m_d3_u4'), DriveChannel(3), name='CR90m_d3_u4'))
(1120, Play(GaussianSquare(duration=640, amp=(-0.19914549342232604-0.17332545183840142j), sigma=64, width=384, name='CR90m_u4'), ControlChannel(4), name='CR90m_u4'))
(1760, Acquire(22400, AcquireChannel(2), MemorySlot(2)))
(1760, Acquire(22400, AcquireChannel(3), MemorySlot(3)))
(1760, Play(GaussianSquare(duration=22400, amp=(0.17297471856935154+0.24511170256814263j), sigma=64, width=22144, name='M_m2'), MeasureChannel(2), name='M_m2'))
(1760, Play(GaussianSquare(duration=22400, amp=(0.2845596317852355-0.12298705605977889j), sigma=64, width=22144, name='M_m3'), MeasureChannel(3), name='M_m3'))
(24160, Delay(1680, MeasureChannel(2)))
(24160, Delay(1680, MeasureChannel(3)))
{'0000': 237, '0001': 787}
===================== Merged Schedule ===========================
(0, ShiftPhase(-1.5707963268, DriveChannel(0)))
(0, ShiftPhase(-1.5707963268, DriveChannel(2)))
(0, ShiftPhase(-1.5707963268, ControlChannel(1)))
(0, ShiftPhase(-1.5707963268, ControlChannel(2)))
(0, ShiftPhase(-1.5707963268, ControlChannel(5)))
(0, Play(Drag(duration=160, amp=(0.09951327785271548+0.0006933284415864516j), sigma=40, beta=-0.803458359149747, name='X90p_d0'), DriveChannel(0), name='X90p_d0'))
(0, Play(Drag(duration=160, amp=(0.09980067544200748+0.0006966624748418894j), sigma=40, beta=-1.7125497287568607, name='X90p_d2'), DriveChannel(2), name='X90p_d2'))
(160, ShiftPhase(-1.5707963268, DriveChannel(0)))
(160, ShiftPhase(1.5707963267948966, DriveChannel(0)))
(160, ShiftPhase(-1.5707963268, DriveChannel(2)))
(160, ShiftPhase(1.5707963267948966, DriveChannel(2)))
(160, ShiftPhase(-1.5707963268, ControlChannel(1)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(1)))
(160, ShiftPhase(-1.5707963268, ControlChannel(2)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(2)))
(160, ShiftPhase(-1.5707963268, ControlChannel(5)))
(160, ShiftPhase(1.5707963267948966, ControlChannel(5)))
(160, Play(Drag(duration=160, amp=(-3.6468764295786235e-17-0.1985267062099168j), sigma=40, beta=-0.589247519648376, name='Ym_d0'), DriveChannel(0), name='Ym_d0'))
(160, Play(Drag(duration=160, amp=(0.09631609052632353+0.0019312172308281552j), sigma=40, beta=-0.6480781322121083, name='X90p_d1'), DriveChannel(1), name='X90p_d1'))
(160, Play(Drag(duration=160, amp=(-3.6695864439047256e-17-0.19976298180883037j), sigma=40, beta=-1.7735007652695884, name='Ym_d2'), DriveChannel(2), name='Ym_d2'))
(160, Play(Drag(duration=160, amp=(0.0979869484685853+0.00041116945711415666j), sigma=40, beta=-0.04121117942326032, name='X90p_d3'), DriveChannel(3), name='X90p_d3'))
(320, Play(GaussianSquare(duration=464, amp=(0.07842142904203984+0.002474560573637188j), sigma=64, width=208, name='CR90p_d1_u0'), DriveChannel(1), name='CR90p_d1_u0'))
(320, Play(GaussianSquare(duration=464, amp=(-0.16890323703241206+0.7767271957330741j), sigma=64, width=208, name='CR90p_u0'), ControlChannel(0), name='CR90p_u0'))
(320, Play(GaussianSquare(duration=640, amp=(0.05128749017413243+0.0009360256849046683j), sigma=64, width=384, name='CR90p_d3_u4'), DriveChannel(3), name='CR90p_d3_u4'))
(320, Play(GaussianSquare(duration=640, amp=(0.19914549342232601+0.17332545183840145j), sigma=64, width=384, name='CR90p_u4'), ControlChannel(4), name='CR90p_u4'))
(784, Play(Drag(duration=160, amp=(0.1985267062099168+0j), sigma=40, beta=-0.589247519648376, name='Xp_d0'), DriveChannel(0), name='Xp_d0'))
(944, Play(GaussianSquare(duration=464, amp=(-0.07842142904203984-0.0024745605736371783j), sigma=64, width=208, name='CR90m_d1_u0'), DriveChannel(1), name='CR90m_d1_u0'))
(944, Play(GaussianSquare(duration=464, amp=(0.16890323703241197-0.7767271957330741j), sigma=64, width=208, name='CR90m_u0'), ControlChannel(0), name='CR90m_u0'))
(960, Play(Drag(duration=160, amp=(0.19976298180883037+0j), sigma=40, beta=-1.7735007652695884, name='Xp_d2'), DriveChannel(2), name='Xp_d2'))
(1120, Play(GaussianSquare(duration=640, amp=(-0.05128749017413243-0.000936025684904662j), sigma=64, width=384, name='CR90m_d3_u4'), DriveChannel(3), name='CR90m_d3_u4'))
(1120, Play(GaussianSquare(duration=640, amp=(-0.19914549342232604-0.17332545183840142j), sigma=64, width=384, name='CR90m_u4'), ControlChannel(4), name='CR90m_u4'))
(1760, Acquire(22400, AcquireChannel(0), MemorySlot(0)))
(1760, Acquire(22400, AcquireChannel(1), MemorySlot(1)))
(1760, Acquire(22400, AcquireChannel(2), MemorySlot(2)))
(1760, Acquire(22400, AcquireChannel(3), MemorySlot(3)))
(1760, Play(GaussianSquare(duration=22400, amp=(-0.23877102316798726-0.14624772988088564j), sigma=64, width=22144, name='M_m0'), MeasureChannel(0), name='M_m0'))
(1760, Play(GaussianSquare(duration=22400, amp=(-0.238399447998461+0.12675055500481686j), sigma=64, width=22144, name='M_m1'), MeasureChannel(1), name='M_m1'))
(1760, Play(GaussianSquare(duration=22400, amp=(0.17297471856935154+0.24511170256814263j), sigma=64, width=22144, name='M_m2'), MeasureChannel(2), name='M_m2'))
(1760, Play(GaussianSquare(duration=22400, amp=(0.2845596317852355-0.12298705605977889j), sigma=64, width=22144, name='M_m3'), MeasureChannel(3), name='M_m3'))
(24160, Delay(1680, MeasureChannel(0)))
(24160, Delay(1680, MeasureChannel(1)))
(24160, Delay(1680, MeasureChannel(2)))
(24160, Delay(1680, MeasureChannel(3)))
{'0000': 32, '0001': 992}
===================== Original Schedule ===========================
F

=================================== FAILURES ===================================
___________________ TestProcessManager.test_merge_schedules ____________________

self = <qvm.qvm_test.TestProcessManager object at 0x7fe9325d4820>

    def test_merge_schedules(self):
        dummy_circ = self.create_dummy_bell_state((0, 1))
        transpiled = transpile(dummy_circ, self._manager._backend)
        sch_first = schedule(transpiled, self._manager._backend)
        print("===================== Schedule 0 ===========================")
        self.show_scheduled_debug_info(sch_first)
        self.run_experiments(transpiled, sch_first, 'pulse')
    
        dummy_circ = self.create_dummy_bell_state((2, 3))
        transpiled = transpile(dummy_circ, self._manager._backend)
        sch_second = schedule(transpiled, self._manager._backend)
        print("===================== Schedule 1 ===========================")
        self.show_scheduled_debug_info(sch_second)
        self.run_experiments(transpiled, sch_second, 'pulse')
    
        sch_merged = self._manager._merge_schedules([sch_first, sch_second])
        print("===================== Merged Schedule ===========================")
        self.show_scheduled_debug_info(sch_merged)
        self.run_experiments(transpiled, sch_merged, 'pulse')
    
        dummy_circ = self.create_dummy_bell_state([(0,1), (3,5)], num_qubits=6)
        print("===================== Original Schedule ===========================")
>       transpiled = transpile(dummy_circ, self._manager._backend)

qvm/qvm_test.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:360: in transpile
    _check_circuits_coupling_map(circuits, cmap_conf, backend)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

circuits = [<qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x7fe9147aff70>]
cmap_conf = [<qiskit.transpiler.coupling.CouplingMap object at 0x7fe914847c90>]
backend = <FakeManila('fake_manila')>

    def _check_circuits_coupling_map(circuits, cmap_conf, backend):
        # Check circuit width against number of qubits in coupling_map(s)
        coupling_maps_list = cmap_conf
        for circuit, parsed_coupling_map in zip(circuits, coupling_maps_list):
            # If coupling_map is not None or num_qubits == 1
            num_qubits = len(circuit.qubits)
            max_qubits = None
            if isinstance(parsed_coupling_map, CouplingMap):
                max_qubits = parsed_coupling_map.size()
    
            # If coupling_map is None, the limit might be in the backend (like in 1Q devices)
            elif backend is not None:
                backend_version = getattr(backend, "version", 0)
                if backend_version <= 1:
                    if not backend.configuration().simulator:
                        max_qubits = backend.configuration().n_qubits
                else:
                    max_qubits = backend.num_qubits
    
            if max_qubits is not None and (num_qubits > max_qubits):
>               raise TranspilerError(
                    f"Number of qubits ({num_qubits}) in {circuit.name} "
                    f"is greater than maximum ({max_qubits}) in the coupling_map"
                )
E               qiskit.transpiler.exceptions.TranspilerError: 'Number of qubits (6) in circuit-533 is greater than maximum (5) in the coupling_map'

/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:422: TranspilerError
=============================== warnings summary ===============================
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
  /root/projects/qcs/qvm/backend_manager.py:205: DeprecationWarning: Back-references to from Bit instances to their containing Registers have been deprecated. Instead, inspect Registers to find their contained Bits.
    r_qubits.append(real_circ.qubits[real_q[q.index]])

qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
  /root/projects/qcs/qvm/backend_manager.py:210: DeprecationWarning: Back-references to from Bit instances to their containing Registers have been deprecated. Instead, inspect Registers to find their contained Bits.
    r_clbits.append(real_circ.clbits[real_q[c.index]])

qvm/qvm_test.py::TestBackendManager::test_compilation_on_compute_unit[qasm]
  /root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/providers/fake_provider/fake_backend.py:462: PendingDeprecationWarning: "warnings" argument will be deprecated as part of the qiskit-aer 0.12.0 and subsequently removed
    noise_model = NoiseModel.from_backend(self, warnings=False)

qvm/qvm_test.py::TestProcessManager::test_merge_schedules
  /root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit_aer/pulse/controllers/pulse_controller.py:144: UserWarning: Warning: qubit_lo_freq was not specified in PulseQobj and there is no default, so it is being automatically determined from the drift Hamiltonian.
    warn('Warning: qubit_lo_freq was not specified in PulseQobj and there is no default, '

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED qvm/qvm_test.py::TestProcessManager::test_merge_schedules - qiskit.tra...
============= 1 failed, 2 passed, 11 warnings in 69.11s (0:01:09) ==============
