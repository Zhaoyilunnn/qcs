Randomly selected files:
/root/projects/QASMBench/small//hhl_n10/hhl_n10.qasm,/root/projects/QASMBench/small//fredkin_n3/fredkin_n3.qasm,/root/projects/QASMBench/small//cat_state_n4/cat_state_n4.qasm
============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /root/projects/qvm
plugins: anyio-3.6.2
collected 7 items / 6 deselected / 1 selected

tst/qvm/integration/qvm_test.py 
==== Testing ===

==== qasm_list ===

/root/projects/QASMBench/small//hhl_n10/hhl_n10.qasm,/root/projects/QASMBench/small//fredkin_n3/fredkin_n3.qasm,/root/projects/QASMBench/small//cat_state_n4/cat_state_n4.qasm
compute_unit_list	[{0, 2}, {4}, {3}]
naive selection time	5.555152893066406e-05
F

=================================== FAILURES ===================================
_ TestSelectMethods.test_select_methods[/root/projects/QASMBench/small//hhl_n10/hhl_n10.qasm,/root/projects/QASMBench/small//fredkin_n3/fredkin_n3.qasm,/root/projects/QASMBench/small//cat_state_n4/cat_state_n4.qasm-FakeBrooklyn-8] _

self = <qvm_test.TestSelectMethods object at 0x7f877674e2f0>
qasm = '/root/projects/QASMBench/small//hhl_n10/hhl_n10.qasm,/root/projects/QASMBench/small//fredkin_n3/fredkin_n3.qasm,/root/projects/QASMBench/small//cat_state_n4/cat_state_n4.qasm'
backend = 'FakeBrooklyn', cu_size = '8'

    def test_select_methods(self, qasm, backend, cu_size):
        """
        Args:
            bench: List of qasm file paths
            backend: Backend name
        """
        self._backend = globals().get(backend)()
        back_manager = FrpBackendManagerV2(self._backend)
        back_manager.cu_size = int(cu_size)
        back_manager.init_helpers()
        back_manager.init_cus()
        proc_manager = QvmProcessManagerV2(self._backend)
    
        qasm_list = qasm.split(",")
        # circuit_list = [
        #     self.get_qiskit_circ("qasm", qasm_path=qasm_path) for qasm_path in qasm_list
        # ]
        # process_list = [back_manager.compile(circ) for circ in circuit_list]
    
        process_list = []
        circuit_list = []
        for qasm_path in qasm_list:
            # The format is "/path/to/the/qasm/file/name.qasm"
            qasm_name = qasm_path.split("/")[-1].split(".")[0]
            file_name = "_".join([backend, qasm_name, str(cu_size)]) + ".pkl"
            compilation_obj = os.path.join(self.data_dir, file_name)
            circ = self.get_qiskit_circ("qasm", qasm_path=qasm_path)
            circuit_list.append(circ)
            if not os.path.exists(compilation_obj):
                proc = back_manager.compile(circ)
                self.save_compilation_outcome(
                    self.data_dir, proc, qasm_name, backend, int(cu_size)
                )
            else:
                proc = self.load_compilation_outcome(
                    self.data_dir, qasm_name, backend, int(cu_size)
                )
            process_list.append(proc)
    
        print("\n==== Testing ===")
        print("\n==== qasm_list ===\n")
        print(qasm)
    
        # Naive
        st_time = time.time()
        naive_exes = proc_manager._select_naive(process_list)
        self.debug_exes(naive_exes)
        print(f"naive selection time\t{time.time() - st_time}")
>       fid = self.get_fidelity(circuit_list, naive_exes)

tst/qvm/integration/qvm_test.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tst/qvm/integration/qvm_test.py:160: in get_fidelity
    res = exe.comp_unit.backend.run(exe.circ, shots=shots).result().get_counts()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Result(backend_name='aer_simulator', backend_version='0.11.0', qobj_id='c40a2687-84e8-4475-834a-852ba2e2a473', job_id=...taken_load_qobj': 0.989267206, 'num_processes_per_experiments': 1, 'omp_enabled': True}, time_taken=1.0216858386993408)
experiment = None

    def get_counts(self, experiment=None):
        """Get the histogram data of an experiment.
    
        Args:
            experiment (str or QuantumCircuit or Schedule or int or None): the index of the
                experiment, as specified by ``data([experiment])``.
    
        Returns:
            dict[str, int] or list[dict[str, int]]: a dictionary or a list of
            dictionaries. A dictionary has the counts for each qubit with
            the keys containing a string in binary format and separated
            according to the registers in circuit (e.g. ``0100 1110``).
            The string is little-endian (cr[0] on the right hand side).
    
        Raises:
            QiskitError: if there are no counts for the experiment.
        """
        if experiment is None:
            exp_keys = range(len(self.results))
        else:
            exp_keys = [experiment]
    
        dict_list = []
        for key in exp_keys:
            exp = self._get_experiment(key)
            try:
                header = exp.header.to_dict()
            except (AttributeError, QiskitError):  # header is not available
                header = None
    
            if "counts" in self.data(key).keys():
                if header:
                    counts_header = {
                        k: v
                        for k, v in header.items()
                        if k in {"time_taken", "creg_sizes", "memory_slots"}
                    }
                else:
                    counts_header = {}
                dict_list.append(Counts(self.data(key)["counts"], **counts_header))
            elif "statevector" in self.data(key).keys():
                vec = postprocess.format_statevector(self.data(key)["statevector"])
                dict_list.append(statevector.Statevector(vec).probabilities_dict(decimals=15))
            else:
>               raise QiskitError(f'No counts for experiment "{repr(key)}"')
E               qiskit.exceptions.QiskitError: 'No counts for experiment "0"'

/root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/result/result.py:289: QiskitError
------------------------------ Captured log call -------------------------------
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 5, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 5'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 4, current visited status: {0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 4'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 9, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 9'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 6, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 6'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 22, current visited status: {0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 22'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 8, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 8'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 7, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 7'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 62, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 62'
WARNING  root:graph.py:571 Failed to grow a subgraph from root: 55, current visited status: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64}, error message is 'Cannot grow a graph that satisfy the subgraph size from current root: 55'
=============================== warnings summary ===============================
qcs/tst/qvm/integration/qvm_test.py::TestSelectMethods::test_select_methods[/root/projects/QASMBench/small//hhl_n10/hhl_n10.qasm,/root/projects/QASMBench/small//fredkin_n3/fredkin_n3.qasm,/root/projects/QASMBench/small//cat_state_n4/cat_state_n4.qasm-FakeBrooklyn-8]
  /root/anaconda3/envs/qcs-noise/lib/python3.10/site-packages/qiskit/providers/fake_provider/fake_backend.py:462: PendingDeprecationWarning: "warnings" argument will be deprecated as part of the qiskit-aer 0.12.0 and subsequently removed
    noise_model = NoiseModel.from_backend(self, warnings=False)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tst/qvm/integration/qvm_test.py::TestSelectMethods::test_select_methods[/root/projects/QASMBench/small/hhl_n10/hhl_n10.qasm,/root/projects/QASMBench/small/fredkin_n3/fredkin_n3.qasm,/root/projects/QASMBench/small/cat_state_n4/cat_state_n4.qasm-FakeBrooklyn-8]
============ 1 failed, 6 deselected, 1 warning in 80.63s (0:01:20) =============
