============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.0, pluggy-1.0.0
rootdir: /root/projects/qcs
collected 13 items / 12 deselected / 1 selected

tst/qdao/engine.py 
::::::::::::::::::Config::::::::::::::::::

NQ::	30
NP::	28
NL::	22

::::::::::::::::::Config::::::::::::::::::

F

=================================== FAILURES ===================================
________ TestEngine.test_run_quafu_any_qasm[vqe_n30.qasm-30-28-22-QDAO] ________

self = <engine.TestEngine object at 0x7f5b20209990>, nq = '30', np = '28'
nl = '22', mode = 'QDAO', qasm = 'vqe_n30.qasm'

    def test_run_quafu_any_qasm(self, nq, np, nl, mode, qasm):
        """
        Basic test to run random circuits and
        compare performance between
        1. Qdao on top of quafu
        2. Quafu
        """
        NQ, NP, NL = self.get_qdao_params(nq, np, nl)
    
        print("\n::::::::::::::::::Config::::::::::::::::::\n")
        print("NQ::\t{}".format(NQ))
        print("NP::\t{}".format(NP))
        print("NL::\t{}".format(NL))
        print("\n::::::::::::::::::Config::::::::::::::::::\n")
    
        try:
            circ = qiskit.circuit.QuantumCircuit.from_qasm_file(QDAO_QASM_DIR + qasm)
        except Exception as e:
            raise ValueError(f"Cannot load qasm file {qasm}: {e}")
        circ = transpile(circ, self._sv_sim)
    
>       self.run_quafu_diff_test(circ, NQ, NP, NL, mode=mode)

tst/qdao/engine.py:362: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tst/qdao/engine.py:278: in run_quafu_diff_test
    engine.run()
qdao/engine.py:166: in run
    sub_circs = self._part.run(self._circ)
qdao/circuit.py:130: in run
    sub_circ = self._circ_helper.gen_sub_circ(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <qdao.quafu.circuit.QuafuCircuitHelper object at 0x7f5b1ffac610>
instrs = [Barrier], num_local = 22, num_primary = 28

    def gen_sub_circ(
            self,
            instrs: List[QuantumGate],
            num_local: int,
            num_primary: int
        ):
        """Generate a sub circuit based on a list of circuit instructions
        We assume there's no conditional instructions and no measurement
        instructions
    
        Args:
            instrs (List[QuantumGate]): A list of instructions
        Return:
            QdaoCircuit
        """
        if not isinstance(self._circ, QuantumCircuit):
            raise ValueError("Please set self._circ")
    
        from qdao.circuit import QdaoCircuit
        # 1. Get the set of qubits
        qset = set(range(num_local))
        for instr in instrs:
            for q in self.get_instr_qubits(instr):
                qset.add(q)
    
        sub_circ = QuantumCircuit(num_primary)
    
        real_qubits = sorted(list(qset))
    
>       assert len(real_qubits) <= num_primary
E       AssertionError

qdao/quafu/circuit.py:86: AssertionError
=========================== short test summary info ============================
FAILED tst/qdao/engine.py::TestEngine::test_run_quafu_any_qasm[vqe_n30.qasm-30-28-22-QDAO]
======================= 1 failed, 12 deselected in 1.91s =======================
